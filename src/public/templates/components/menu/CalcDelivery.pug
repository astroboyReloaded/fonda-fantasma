section#calcDelivery_section
  strong Calcula el costo de envío a tu ubicación actual o a una dirección:
  form#calcDelivery_form
    span
      input#address(type="text" placeholder="dirección")
      small (opcional)
    button#CalcDelivery_Btn(type="button") Calcular envío
    small.calc-delivery-small No recibiremos tu hubicación hasta que hayas confirmado tu pedido.
    p#delivery_price_tag

script.
  const CalcDelivery_Btn = document.getElementById('CalcDelivery_Btn');
  const deliveryPrice_Tag = document.getElementById('delivery_price_tag');
  const addressInput = document.getElementById('address');
  const calcDelivery_Container = document.getElementById('calcDelivery_section');  
  let map;  // Google Maps object
  let marker;  // Marker on the map

  document.addEventListener('DOMContentLoaded', function () {
    CalcDelivery_Btn.addEventListener('click', async () => {
      try {
        let client_location;

        // Check if address is provided
        const address = addressInput.value.trim();
        if (address) {
          // Get coordinates from address
          console.log(address)
          client_location = await getCoordinatesFromAddress(address);
        } else {
          // Get coordinates from geolocation
          client_location = await getClientLocation();
        }

        // Send location to the server for delivery cost calculation
        const response = await fetch('/api/calculate-delivery', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(client_location)
        });
        const result = await response.json();

        deliveryPrice_Tag.textContent = `Costo de envío estimado: $${result.delivery_cost.toFixed(2)}`;

        // Initialize the map with the location
        initMap(client_location.latitude, client_location.longitude);
      } catch (error) {
        deliveryPrice_Tag.textContent = 'Error getting delivery cost: ' + error;
      }
    })
  });

  function getClientLocation() {
    return new Promise((resolve, reject) => {
      const geo = navigator.geolocation;
      if (geo) {
        geo.getCurrentPosition(
          position => {
            const client_location = {
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
            };
            resolve(client_location);
          },
          err => reject('Geolocation error: ' + err.message)
        );
      } else {
        reject('Geolocation is not supported by this browser.');
      }
    });
  }

  function getCoordinatesFromAddress(address) {
    const geocoder = new google.maps.Geocoder();
    return new Promise((resolve, reject) => {
      geocoder.geocode({ address: address }, (results, status) => {
        if (status === 'OK') {
          const location = results[0].geometry.location;
          resolve({
            latitude: location.lat(),
            longitude: location.lng(),
          });
        } else {
          reject('Geocode was not successful for the following reason: ' + status);
        }
      });
    });
  }

  function initMap(lat, lng) {
    const location = { lat: parseFloat(lat), lng: parseFloat(lng) };
    if (!map) {
      map = new google.maps.Map(createMapContainer(), {
        zoom: 14,
        center: location,
      });
      marker = new google.maps.Marker({
        position: location,
        map: map,
        title: 'Your Location',
      });
    } else {
      map.setCenter(location);
      marker.setPosition(location);
    }
  }

  function createMapContainer() {
    const map_Container = document.createElement('div');
    map_Container.id = 'map';
    map_Container.style.width = '100%';
    map_Container.style.height = '180px';
    calcDelivery_Container.appendChild(map_Container);
    return map_Container;
  }
